# Generated by Django 5.2.1 on 2025-07-04 22:33

import django.core.validators
import django.db.models.deletion
import django.db.models.lookups
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CronFrequencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cron_expression', models.CharField(help_text='Expressão Cron para agendamento da tarefa', max_length=255, unique=True, verbose_name='Expressão Cron')),
                ('frequencia', models.CharField(help_text="Descrição da frequência da tarefa, ex: 'diária', 'semanal', 'mensal'", max_length=50, verbose_name='Frequência')),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome')),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materiais',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='TarefaHabilidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('habilidade_id', models.IntegerField(help_text='ID da habilidade associada à tarefa', verbose_name='Habilidade ID')),
                ('multiplicador_xp', models.FloatField(default=1.0, help_text='Multiplicador de XP para a habilidade associada à tarefa', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(10.0)], verbose_name='Multiplicador de XP')),
            ],
        ),
        migrations.CreateModel(
            name='Tarefa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plantio_id', models.IntegerField(help_text='ID do plantio associado à tarefa', verbose_name='Plantio ID')),
                ('nome', models.CharField(max_length=200, verbose_name='Nome')),
                ('tipo', models.CharField(choices=[('cultivo', 'Cultivo'), ('colheita', 'Colheita'), ('irrigacao', 'Irrigação'), ('inspecao', 'Inspeção'), ('nutricao', 'Nutrição'), ('poda', 'Poda')], max_length=20, verbose_name='Tipo')),
                ('quantidade_total', models.IntegerField(verbose_name='Quantidade Total')),
                ('quantidade_realizada', models.IntegerField(default=0, help_text='Quantidade de vezes que a tarefa foi realizada', verbose_name='Quantidade Realizada')),
                ('atualizado_em', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('cron', models.CharField(help_text='Formato Cron para agendamento', max_length=100, verbose_name='Cron')),
                ('criado_em', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('concluida', models.GeneratedField(db_persist=True, expression=django.db.models.lookups.GreaterThanOrEqual(models.F('quantidade_realizada'), models.F('quantidade_total')), help_text='Indica se a tarefa foi concluída', output_field=models.BooleanField(), verbose_name='Concluída')),
                ('data_conclusao', models.DateTimeField(blank=True, null=True, verbose_name='Data de Conclusão')),
                ('data_ultima_realizacao', models.DateTimeField(blank=True, help_text='Data e hora da última vez que a tarefa foi realizada', null=True, verbose_name='Data da Última Realização')),
                ('habilidade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tarefas', to='tarefas.tarefahabilidade', verbose_name='Habilidade')),
            ],
            options={
                'verbose_name': 'Tarefa',
                'verbose_name_plural': 'Tarefas',
                'ordering': ['-criado_em'],
            },
        ),
        migrations.CreateModel(
            name='MaterialTarefa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.DecimalField(decimal_places=2, help_text='Ex: 1, 2, 3 (valor numérico)', max_digits=10, verbose_name='Quantidade')),
                ('unidade', models.CharField(default='un', help_text='Ex: un, Litros, g', max_length=50, verbose_name='Unidade')),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materiais_tarefa', to='tarefas.material', verbose_name='Material')),
                ('tarefa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materiais', to='tarefas.tarefa', verbose_name='Tarefa')),
            ],
            options={
                'verbose_name': 'Material da Tarefa',
                'verbose_name_plural': 'Materiais da Tarefa',
                'unique_together': {('tarefa', 'material')},
            },
        ),
        migrations.CreateModel(
            name='Etapa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('ordem', models.PositiveIntegerField(help_text='Ordem da etapa no processo', verbose_name='Ordem')),
                ('tarefa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='etapas', to='tarefas.tarefa', verbose_name='Tarefa')),
            ],
            options={
                'verbose_name': 'Etapa',
                'verbose_name_plural': 'Etapas',
                'ordering': ['tarefa', 'ordem'],
                'unique_together': {('tarefa', 'ordem')},
            },
        ),
    ]
